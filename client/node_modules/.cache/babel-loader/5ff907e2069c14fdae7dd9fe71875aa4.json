{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nexport const isVariantPalette = colorPalette => colorPalette && typeof colorPalette === 'object' && Object.keys(colorPalette).some(value => {\n  var _value$match;\n\n  return (_value$match = value.match) == null ? void 0 : _value$match.call(value, /^(plain(Hover|Active|Disabled)?(Color|Bg)|outlined(Hover|Active|Disabled)?(Color|Border|Bg)|soft(Hover|Active|Disabled)?(Color|Bg)|solid(Hover|Active|Disabled)?(Color|Bg))$/);\n});\n\nconst assignCss = (target, variantVar, value) => {\n  if (variantVar.includes('Color')) {\n    target.color = value;\n  }\n\n  if (variantVar.includes('Bg')) {\n    target.backgroundColor = value;\n  }\n\n  if (variantVar.includes('Border')) {\n    target.borderColor = value;\n  }\n};\n/**\n *\n * @param name variant name\n * @example 'plain'\n *\n * @param palette object that contains palette tokens\n * @example { primary: { plainColor: '', plainHoverColor: '', ...tokens }, ...other palette }\n *\n * @param getCssVar a function that receive variant token and return a CSS variable\n *\n * result will be the stylesheet based on the palette tokens\n * @example {\n *   color: '--token',\n *   backgroundColor: '--token',\n *   '--variant-borderWidth': '0px',\n * }\n * @example {\n *   cursor: 'pointer',\n *   color: '--token',\n *   backgroundColor: '--token',\n *   '--variant-borderWidth': '1px',\n * }\n * @example {\n *   pointerEvents: 'none',\n *   cursor: 'default',\n *   color: '--token',\n *   backgroundColor: '--token',\n *   '--variant-borderWidth': '0px',\n * }\n */\n\n\nexport const createVariantStyle = (name, palette, getCssVar) => {\n  const result = {};\n  Object.entries(palette || {}).forEach(_ref => {\n    let [variantVar, value] = _ref;\n\n    if (variantVar.match(new RegExp(`${name}(color|bg|border)`, 'i')) && !!value) {\n      const cssVar = getCssVar ? getCssVar(variantVar) : value;\n\n      if (variantVar.includes('Disabled')) {\n        result.pointerEvents = 'none';\n        result.cursor = 'default';\n        result['--Icon-color'] = 'currentColor';\n      }\n\n      if (variantVar.match(/(Hover|Active|Disabled)/)) {\n        assignCss(result, variantVar, cssVar);\n      } else {\n        // initial state\n        if (!result['--variant-borderWidth']) {\n          // important to prevent inheritance, otherwise the children will have the wrong styles e.g.\n          //   <Card variant=\"outlined\">\n          //     <Typography variant=\"soft\">\n          result['--variant-borderWidth'] = '0px';\n        }\n\n        if (variantVar.includes('Border')) {\n          result['--variant-borderWidth'] = '1px';\n          result.border = 'var(--variant-borderWidth) solid';\n        } // border color should come later\n\n\n        assignCss(result, variantVar, cssVar);\n      }\n    }\n  });\n  return result;\n}; // It's used only in extendTheme, so it's safe to always include default values\n\nexport const createVariant = (variant, theme) => {\n  let result = {};\n\n  if (theme) {\n    const {\n      getCssVar,\n      palette\n    } = theme;\n    Object.entries(palette).forEach(entry => {\n      const [color, colorPalette] = entry;\n\n      if (isVariantPalette(colorPalette) && typeof colorPalette === 'object') {\n        result = _extends({}, result, {\n          [color]: createVariantStyle(variant, colorPalette, variantVar => `var(--variant-${variantVar}, ${getCssVar(`palette-${color}-${variantVar}`, palette[color][variantVar])})`)\n        });\n      }\n    });\n  }\n\n  result.context = createVariantStyle(variant, {\n    plainColor: 'var(--variant-plainColor)',\n    plainHoverColor: `var(--variant-plainHoverColor)`,\n    plainHoverBg: 'var(--variant-plainHoverBg)',\n    plainActiveBg: 'var(--variant-plainActiveBg)',\n    plainDisabledColor: 'var(--variant-plainDisabledColor)',\n    outlinedColor: 'var(--variant-outlinedColor)',\n    outlinedBorder: 'var(--variant-outlinedBorder)',\n    outlinedHoverColor: `var(--variant-outlinedHoverColor)`,\n    outlinedHoverBorder: `var(--variant-outlinedHoverBorder)`,\n    outlinedHoverBg: `var(--variant-outlinedHoverBg)`,\n    outlinedActiveBg: `var(--variant-outlinedActiveBg)`,\n    outlinedDisabledColor: `var(--variant-outlinedDisabledColor)`,\n    outlinedDisabledBorder: `var(--variant-outlinedDisabledBorder)`,\n    softColor: 'var(--variant-softColor)',\n    softBg: 'var(--variant-softBg)',\n    softHoverColor: 'var(--variant-softHoverColor)',\n    softHoverBg: 'var(--variant-softHoverBg)',\n    softActiveBg: 'var(--variant-softActiveBg)',\n    softDisabledColor: 'var(--variant-softDisabledColor)',\n    softDisabledBg: 'var(--variant-softDisabledBg)',\n    solidColor: 'var(--variant-solidColor)',\n    solidBg: 'var(--variant-solidBg)',\n    solidHoverBg: 'var(--variant-solidHoverBg)',\n    solidActiveBg: 'var(--variant-solidActiveBg)',\n    solidDisabledColor: 'var(--variant-solidDisabledColor)',\n    solidDisabledBg: 'var(--variant-solidDisabledBg)'\n  });\n  return result;\n};","map":{"version":3,"names":["_extends","isVariantPalette","colorPalette","Object","keys","some","value","_value$match","match","call","assignCss","target","variantVar","includes","color","backgroundColor","borderColor","createVariantStyle","name","palette","getCssVar","result","entries","forEach","RegExp","cssVar","pointerEvents","cursor","border","createVariant","variant","theme","entry","context","plainColor","plainHoverColor","plainHoverBg","plainActiveBg","plainDisabledColor","outlinedColor","outlinedBorder","outlinedHoverColor","outlinedHoverBorder","outlinedHoverBg","outlinedActiveBg","outlinedDisabledColor","outlinedDisabledBorder","softColor","softBg","softHoverColor","softHoverBg","softActiveBg","softDisabledColor","softDisabledBg","solidColor","solidBg","solidHoverBg","solidActiveBg","solidDisabledColor","solidDisabledBg"],"sources":["/Users/jorgemartinez/Documents/MERN-deployment/client/node_modules/@mui/joy/styles/variantUtils.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nexport const isVariantPalette = colorPalette => colorPalette && typeof colorPalette === 'object' && Object.keys(colorPalette).some(value => {\n  var _value$match;\n  return (_value$match = value.match) == null ? void 0 : _value$match.call(value, /^(plain(Hover|Active|Disabled)?(Color|Bg)|outlined(Hover|Active|Disabled)?(Color|Border|Bg)|soft(Hover|Active|Disabled)?(Color|Bg)|solid(Hover|Active|Disabled)?(Color|Bg))$/);\n});\nconst assignCss = (target, variantVar, value) => {\n  if (variantVar.includes('Color')) {\n    target.color = value;\n  }\n  if (variantVar.includes('Bg')) {\n    target.backgroundColor = value;\n  }\n  if (variantVar.includes('Border')) {\n    target.borderColor = value;\n  }\n};\n\n/**\n *\n * @param name variant name\n * @example 'plain'\n *\n * @param palette object that contains palette tokens\n * @example { primary: { plainColor: '', plainHoverColor: '', ...tokens }, ...other palette }\n *\n * @param getCssVar a function that receive variant token and return a CSS variable\n *\n * result will be the stylesheet based on the palette tokens\n * @example {\n *   color: '--token',\n *   backgroundColor: '--token',\n *   '--variant-borderWidth': '0px',\n * }\n * @example {\n *   cursor: 'pointer',\n *   color: '--token',\n *   backgroundColor: '--token',\n *   '--variant-borderWidth': '1px',\n * }\n * @example {\n *   pointerEvents: 'none',\n *   cursor: 'default',\n *   color: '--token',\n *   backgroundColor: '--token',\n *   '--variant-borderWidth': '0px',\n * }\n */\nexport const createVariantStyle = (name, palette, getCssVar) => {\n  const result = {};\n  Object.entries(palette || {}).forEach(([variantVar, value]) => {\n    if (variantVar.match(new RegExp(`${name}(color|bg|border)`, 'i')) && !!value) {\n      const cssVar = getCssVar ? getCssVar(variantVar) : value;\n      if (variantVar.includes('Disabled')) {\n        result.pointerEvents = 'none';\n        result.cursor = 'default';\n        result['--Icon-color'] = 'currentColor';\n      }\n      if (variantVar.match(/(Hover|Active|Disabled)/)) {\n        assignCss(result, variantVar, cssVar);\n      } else {\n        // initial state\n        if (!result['--variant-borderWidth']) {\n          // important to prevent inheritance, otherwise the children will have the wrong styles e.g.\n          //   <Card variant=\"outlined\">\n          //     <Typography variant=\"soft\">\n          result['--variant-borderWidth'] = '0px';\n        }\n        if (variantVar.includes('Border')) {\n          result['--variant-borderWidth'] = '1px';\n          result.border = 'var(--variant-borderWidth) solid';\n        }\n        // border color should come later\n        assignCss(result, variantVar, cssVar);\n      }\n    }\n  });\n  return result;\n};\n// It's used only in extendTheme, so it's safe to always include default values\nexport const createVariant = (variant, theme) => {\n  let result = {};\n  if (theme) {\n    const {\n      getCssVar,\n      palette\n    } = theme;\n    Object.entries(palette).forEach(entry => {\n      const [color, colorPalette] = entry;\n      if (isVariantPalette(colorPalette) && typeof colorPalette === 'object') {\n        result = _extends({}, result, {\n          [color]: createVariantStyle(variant, colorPalette, variantVar => `var(--variant-${variantVar}, ${getCssVar(`palette-${color}-${variantVar}`, palette[color][variantVar])})`)\n        });\n      }\n    });\n  }\n  result.context = createVariantStyle(variant, {\n    plainColor: 'var(--variant-plainColor)',\n    plainHoverColor: `var(--variant-plainHoverColor)`,\n    plainHoverBg: 'var(--variant-plainHoverBg)',\n    plainActiveBg: 'var(--variant-plainActiveBg)',\n    plainDisabledColor: 'var(--variant-plainDisabledColor)',\n    outlinedColor: 'var(--variant-outlinedColor)',\n    outlinedBorder: 'var(--variant-outlinedBorder)',\n    outlinedHoverColor: `var(--variant-outlinedHoverColor)`,\n    outlinedHoverBorder: `var(--variant-outlinedHoverBorder)`,\n    outlinedHoverBg: `var(--variant-outlinedHoverBg)`,\n    outlinedActiveBg: `var(--variant-outlinedActiveBg)`,\n    outlinedDisabledColor: `var(--variant-outlinedDisabledColor)`,\n    outlinedDisabledBorder: `var(--variant-outlinedDisabledBorder)`,\n    softColor: 'var(--variant-softColor)',\n    softBg: 'var(--variant-softBg)',\n    softHoverColor: 'var(--variant-softHoverColor)',\n    softHoverBg: 'var(--variant-softHoverBg)',\n    softActiveBg: 'var(--variant-softActiveBg)',\n    softDisabledColor: 'var(--variant-softDisabledColor)',\n    softDisabledBg: 'var(--variant-softDisabledBg)',\n    solidColor: 'var(--variant-solidColor)',\n    solidBg: 'var(--variant-solidBg)',\n    solidHoverBg: 'var(--variant-solidHoverBg)',\n    solidActiveBg: 'var(--variant-solidActiveBg)',\n    solidDisabledColor: 'var(--variant-solidDisabledColor)',\n    solidDisabledBg: 'var(--variant-solidDisabledBg)'\n  });\n  return result;\n};"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,MAAMC,gBAAgB,GAAGC,YAAY,IAAIA,YAAY,IAAI,OAAOA,YAAP,KAAwB,QAAxC,IAAoDC,MAAM,CAACC,IAAP,CAAYF,YAAZ,EAA0BG,IAA1B,CAA+BC,KAAK,IAAI;EAC1I,IAAIC,YAAJ;;EACA,OAAO,CAACA,YAAY,GAAGD,KAAK,CAACE,KAAtB,KAAgC,IAAhC,GAAuC,KAAK,CAA5C,GAAgDD,YAAY,CAACE,IAAb,CAAkBH,KAAlB,EAAyB,8KAAzB,CAAvD;AACD,CAHmG,CAA7F;;AAIP,MAAMI,SAAS,GAAG,CAACC,MAAD,EAASC,UAAT,EAAqBN,KAArB,KAA+B;EAC/C,IAAIM,UAAU,CAACC,QAAX,CAAoB,OAApB,CAAJ,EAAkC;IAChCF,MAAM,CAACG,KAAP,GAAeR,KAAf;EACD;;EACD,IAAIM,UAAU,CAACC,QAAX,CAAoB,IAApB,CAAJ,EAA+B;IAC7BF,MAAM,CAACI,eAAP,GAAyBT,KAAzB;EACD;;EACD,IAAIM,UAAU,CAACC,QAAX,CAAoB,QAApB,CAAJ,EAAmC;IACjCF,MAAM,CAACK,WAAP,GAAqBV,KAArB;EACD;AACF,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMW,kBAAkB,GAAG,CAACC,IAAD,EAAOC,OAAP,EAAgBC,SAAhB,KAA8B;EAC9D,MAAMC,MAAM,GAAG,EAAf;EACAlB,MAAM,CAACmB,OAAP,CAAeH,OAAO,IAAI,EAA1B,EAA8BI,OAA9B,CAAsC,QAAyB;IAAA,IAAxB,CAACX,UAAD,EAAaN,KAAb,CAAwB;;IAC7D,IAAIM,UAAU,CAACJ,KAAX,CAAiB,IAAIgB,MAAJ,CAAY,GAAEN,IAAK,mBAAnB,EAAuC,GAAvC,CAAjB,KAAiE,CAAC,CAACZ,KAAvE,EAA8E;MAC5E,MAAMmB,MAAM,GAAGL,SAAS,GAAGA,SAAS,CAACR,UAAD,CAAZ,GAA2BN,KAAnD;;MACA,IAAIM,UAAU,CAACC,QAAX,CAAoB,UAApB,CAAJ,EAAqC;QACnCQ,MAAM,CAACK,aAAP,GAAuB,MAAvB;QACAL,MAAM,CAACM,MAAP,GAAgB,SAAhB;QACAN,MAAM,CAAC,cAAD,CAAN,GAAyB,cAAzB;MACD;;MACD,IAAIT,UAAU,CAACJ,KAAX,CAAiB,yBAAjB,CAAJ,EAAiD;QAC/CE,SAAS,CAACW,MAAD,EAAST,UAAT,EAAqBa,MAArB,CAAT;MACD,CAFD,MAEO;QACL;QACA,IAAI,CAACJ,MAAM,CAAC,uBAAD,CAAX,EAAsC;UACpC;UACA;UACA;UACAA,MAAM,CAAC,uBAAD,CAAN,GAAkC,KAAlC;QACD;;QACD,IAAIT,UAAU,CAACC,QAAX,CAAoB,QAApB,CAAJ,EAAmC;UACjCQ,MAAM,CAAC,uBAAD,CAAN,GAAkC,KAAlC;UACAA,MAAM,CAACO,MAAP,GAAgB,kCAAhB;QACD,CAXI,CAYL;;;QACAlB,SAAS,CAACW,MAAD,EAAST,UAAT,EAAqBa,MAArB,CAAT;MACD;IACF;EACF,CA1BD;EA2BA,OAAOJ,MAAP;AACD,CA9BM,C,CA+BP;;AACA,OAAO,MAAMQ,aAAa,GAAG,CAACC,OAAD,EAAUC,KAAV,KAAoB;EAC/C,IAAIV,MAAM,GAAG,EAAb;;EACA,IAAIU,KAAJ,EAAW;IACT,MAAM;MACJX,SADI;MAEJD;IAFI,IAGFY,KAHJ;IAIA5B,MAAM,CAACmB,OAAP,CAAeH,OAAf,EAAwBI,OAAxB,CAAgCS,KAAK,IAAI;MACvC,MAAM,CAAClB,KAAD,EAAQZ,YAAR,IAAwB8B,KAA9B;;MACA,IAAI/B,gBAAgB,CAACC,YAAD,CAAhB,IAAkC,OAAOA,YAAP,KAAwB,QAA9D,EAAwE;QACtEmB,MAAM,GAAGrB,QAAQ,CAAC,EAAD,EAAKqB,MAAL,EAAa;UAC5B,CAACP,KAAD,GAASG,kBAAkB,CAACa,OAAD,EAAU5B,YAAV,EAAwBU,UAAU,IAAK,iBAAgBA,UAAW,KAAIQ,SAAS,CAAE,WAAUN,KAAM,IAAGF,UAAW,EAAhC,EAAmCO,OAAO,CAACL,KAAD,CAAP,CAAeF,UAAf,CAAnC,CAA+D,GAA9I;QADC,CAAb,CAAjB;MAGD;IACF,CAPD;EAQD;;EACDS,MAAM,CAACY,OAAP,GAAiBhB,kBAAkB,CAACa,OAAD,EAAU;IAC3CI,UAAU,EAAE,2BAD+B;IAE3CC,eAAe,EAAG,gCAFyB;IAG3CC,YAAY,EAAE,6BAH6B;IAI3CC,aAAa,EAAE,8BAJ4B;IAK3CC,kBAAkB,EAAE,mCALuB;IAM3CC,aAAa,EAAE,8BAN4B;IAO3CC,cAAc,EAAE,+BAP2B;IAQ3CC,kBAAkB,EAAG,mCARsB;IAS3CC,mBAAmB,EAAG,oCATqB;IAU3CC,eAAe,EAAG,gCAVyB;IAW3CC,gBAAgB,EAAG,iCAXwB;IAY3CC,qBAAqB,EAAG,sCAZmB;IAa3CC,sBAAsB,EAAG,uCAbkB;IAc3CC,SAAS,EAAE,0BAdgC;IAe3CC,MAAM,EAAE,uBAfmC;IAgB3CC,cAAc,EAAE,+BAhB2B;IAiB3CC,WAAW,EAAE,4BAjB8B;IAkB3CC,YAAY,EAAE,6BAlB6B;IAmB3CC,iBAAiB,EAAE,kCAnBwB;IAoB3CC,cAAc,EAAE,+BApB2B;IAqB3CC,UAAU,EAAE,2BArB+B;IAsB3CC,OAAO,EAAE,wBAtBkC;IAuB3CC,YAAY,EAAE,6BAvB6B;IAwB3CC,aAAa,EAAE,8BAxB4B;IAyB3CC,kBAAkB,EAAE,mCAzBuB;IA0B3CC,eAAe,EAAE;EA1B0B,CAAV,CAAnC;EA4BA,OAAOtC,MAAP;AACD,CA7CM"},"metadata":{},"sourceType":"module"}
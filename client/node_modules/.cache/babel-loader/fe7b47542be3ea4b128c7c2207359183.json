{"ast":null,"code":"var _jsxFileName = \"/Users/jorgemartinez/Documents/MERN-deployment/client/src/components/Main.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport AdminTable from './AdminTable';\nimport Histogram from './Histogram';\nimport { useNavigate } from 'react-router-dom';\nimport NavBarMui from './NavBarMui';\nimport Statuses from './Statuses';\nimport VerificationTable from './VerificationTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Main = () => {\n  _s();\n\n  const navigate = useNavigate();\n  const [customers, setCustomers] = useState([]);\n  const [repsWithCustomer, setRepWithCustomer] = useState([]);\n  const [userRole, setUserRole] = useState('');\n  const [thisMonth, setThisMonth] = useState('');\n  const [verifListState, setVerifListState] = useState(' ');\n  useEffect(() => {\n    axios.get(process.env.REACT_APP_API_URL + '/api/customers/all', {\n      withCredentials: true\n    }).then(response => {\n      setCustomers(response.data); // Create a new Date object\n\n      const currentDate = new Date(); // Get the month (0-indexed, so we add 1 to get the correct month)\n\n      const month = currentDate.getMonth() + 1; // Set the current month in the state\n\n      setThisMonth(month.toString());\n    }).catch(err => navigate(\"/login\")); //retrieve customers with reps\n\n    axios.get(process.env.REACT_APP_API_URL + '/api/user/all/customers', {\n      withCredentials: true\n    }).then(response => {\n      setRepWithCustomer(response.data);\n    }).catch(err => console.log(err));\n    axios.get(process.env.REACT_APP_API_URL + '/api/getUser', {\n      withCredentials: true\n    }).then(response => {\n      // console.log('Informacion de usuario')\n      // console.log(response.data)\n      setUserRole(response.data.role);\n    }).catch(err => console.log(err));\n  }, []); //update list after delete\n\n  const filterList = deleteId => {\n    const updatedList = customers.filter(eachCust => deleteId !== eachCust._id);\n    setCustomers(updatedList);\n  };\n\n  const filterByMonth = customers => {\n    const filteredBymonth = customers.filter(item => {\n      const itemMonth = new Date(item.dos).getMonth() + 1; // month of sale of each customer (1-12)\n\n      return itemMonth == thisMonth;\n    });\n    setCustomers(filteredBymonth);\n  }; //Customers filtered by verification\n\n\n  const filterVerifList = () => {\n    const updatedVerifList = customers.filter(eachCust => eachCust.status == 'verification');\n    setVerifListState(updatedVerifList);\n  };\n\n  const verifList = customers.filter(eachCust => eachCust.status == 'verification'); //Calculations\n  //Calculate all de statuses  \n\n  let arrOfStatus = customers.map(eachRCust => eachRCust.status);\n  let sold = 0;\n  let installed = 0;\n  let contractSigned = 0;\n  let paid = 0;\n\n  for (let i = 0; i < arrOfStatus.length; i++) {\n    if (arrOfStatus[i] === 'Sold') {\n      sold++;\n    }\n\n    if (arrOfStatus[i] === 'Installed') {\n      installed++;\n    }\n\n    if (arrOfStatus[i] === 'Contract signed') {\n      contractSigned++;\n    }\n\n    if (arrOfStatus[i] === 'Paid') {\n      paid++;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavBarMui, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Admin Dashboard Role: \", userRole]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [userRole === 'admin' && /*#__PURE__*/_jsxDEV(Statuses, {\n        sold: sold,\n        installed: installed,\n        contractSigned: contractSigned,\n        paid: paid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 32\n      }, this), userRole === 'admin' && /*#__PURE__*/_jsxDEV(AdminTable, {\n        customers: customers,\n        thisMonth: thisMonth,\n        onDelete: filterList,\n        onFilterByMonth: filterByMonth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 33\n      }, this), userRole === 'admin' && /*#__PURE__*/_jsxDEV(Histogram, {\n        repsWithCustomer: repsWithCustomer,\n        customers: customers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 33\n      }, this), userRole === 'verif' && /*#__PURE__*/_jsxDEV(VerificationTable, {\n        customers: customers,\n        verifList: verifList,\n        onNewComment: filterVerifList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Main, \"nMyUNhikV0QGN3B0RbNq3DFynz4=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["axios","React","useState","useEffect","AdminTable","Histogram","useNavigate","NavBarMui","Statuses","VerificationTable","Main","navigate","customers","setCustomers","repsWithCustomer","setRepWithCustomer","userRole","setUserRole","thisMonth","setThisMonth","verifListState","setVerifListState","get","process","env","REACT_APP_API_URL","withCredentials","then","response","data","currentDate","Date","month","getMonth","toString","catch","err","console","log","role","filterList","deleteId","updatedList","filter","eachCust","_id","filterByMonth","filteredBymonth","item","itemMonth","dos","filterVerifList","updatedVerifList","status","verifList","arrOfStatus","map","eachRCust","sold","installed","contractSigned","paid","i","length"],"sources":["/Users/jorgemartinez/Documents/MERN-deployment/client/src/components/Main.jsx"],"sourcesContent":["import axios from 'axios'\nimport React, {useState, useEffect} from 'react'\nimport AdminTable from './AdminTable'\nimport Histogram from './Histogram'\nimport { useNavigate } from 'react-router-dom'\nimport NavBarMui from './NavBarMui'\nimport Statuses from './Statuses'\nimport VerificationTable from './VerificationTable'\n\n\nconst Main = () => {\n  const navigate = useNavigate()\n  const [customers, setCustomers] = useState([])\n  const [repsWithCustomer, setRepWithCustomer] = useState([])\n  const [userRole, setUserRole] = useState('')\n  const [thisMonth, setThisMonth] = useState('')\n  const [verifListState, setVerifListState] = useState(' ')\n\n  useEffect(()=>{\n    axios.get(process.env.REACT_APP_API_URL+'/api/customers/all', {withCredentials: true})\n      .then(response=>{\n        \n        setCustomers(response.data)\n\n         // Create a new Date object\n      const currentDate = new Date();\n\n      // Get the month (0-indexed, so we add 1 to get the correct month)\n      const month = currentDate.getMonth() + 1;\n\n      // Set the current month in the state\n      setThisMonth(month.toString());\n\n\n      })\n      .catch(err=>navigate(\"/login\"))\n\n\n      //retrieve customers with reps\n\n      axios.get(process.env.REACT_APP_API_URL+'/api/user/all/customers', {withCredentials: true})\n      .then(response=>{\n  \n        setRepWithCustomer(response.data)\n      })\n      .catch(err=>console.log(err))\n\n      axios.get(process.env.REACT_APP_API_URL+'/api/getUser', {withCredentials: true})\n      .then(response=>{\n        // console.log('Informacion de usuario')\n        // console.log(response.data)\n  \n        setUserRole(response.data.role)\n      })\n      .catch(err=>console.log(err))\n\n  },[])\n\n\n  //update list after delete\n  const filterList = (deleteId) =>{\n    const updatedList = customers.filter((eachCust)=>deleteId!==eachCust._id)\n    setCustomers(updatedList)\n  }\n\n  const filterByMonth = (customers) => {\n    const filteredBymonth = customers.filter(item => {\n     \n      const itemMonth = new Date(item.dos).getMonth() + 1; // month of sale of each customer (1-12)\n     \n      return itemMonth == thisMonth\n    });\n    setCustomers(filteredBymonth);\n\n\n  }\n\n//Customers filtered by verification\nconst filterVerifList = () =>{\n  const updatedVerifList= customers.filter((eachCust)=>eachCust.status == 'verification')\n  setVerifListState(updatedVerifList)\n\n}\n\nconst verifList = customers.filter((eachCust)=>eachCust.status == 'verification')\n\n//Calculations\n\n//Calculate all de statuses  \n  let arrOfStatus = customers.map((eachRCust)=> eachRCust.status)\n  let sold = 0\n  let installed = 0\n  let contractSigned = 0\n  let paid = 0\n\n  for (let i = 0; i < arrOfStatus.length; i++){\n    if (arrOfStatus[i] === 'Sold'){\n      sold++\n    }\n    if (arrOfStatus[i] === 'Installed'){\n      installed++\n    }\n    if (arrOfStatus[i] === 'Contract signed'){\n      contractSigned++\n    }\n    if (arrOfStatus[i] === 'Paid'){\n      paid++\n    }\n  }\n\n\n  return (\n    <div>\n      <NavBarMui/>\n   \n      <h1>Admin Dashboard Role: {userRole}</h1>\n      <div>\n     \n      {userRole === 'admin' && <Statuses sold={sold} installed={installed} contractSigned={contractSigned} paid={paid}/>}\n    \n      {userRole === 'admin' &&  <AdminTable customers={customers} thisMonth={thisMonth} onDelete={filterList} onFilterByMonth={filterByMonth}/>}\n\n   \n     \n       {userRole === 'admin' && <Histogram repsWithCustomer={repsWithCustomer} customers={customers}/>}\n      \n\n      \n      {userRole === 'verif' && <VerificationTable  customers={customers} verifList={verifList} onNewComment={filterVerifList}/>}   \n\n\n    \n      </div>\n    </div>\n  )\n}\n\nexport default Main"],"mappings":"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"},"metadata":{},"sourceType":"module"}